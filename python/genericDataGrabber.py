# Generic Data Grabber


# CoolProp is for getting the thermo data
import CoolProp
import CoolProp.CoolProp as CP
# Matplotlib for making pretty pictures
import matplotlib.pyplot as plt
# Data Storage Containers
import numpy as np
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D


class ThermoFluid():
    """
    A class that will contain the data requested
    init: ThermoFluid: String: CoolProp Fluid
          numPoints: int: number of Points for linspaces
          colorMap: str: What color map to use
          var1: str: x var, normally T, P
          var2: str: y var, normally P, V
          outvar: str: z var (generated by code), normally S, U
    """

    def __init__(self, fluid: str = "Water", numPoints: int = 250, colorMap: str = "nipy_spectral", var1: str = "T", var2: str = "P", outvar: str = "S"):
        self.FLUID = fluid
        self.NUM_POINTS = numPoints
        self.COLORMAP = colorMap
        self.X = var1
        self.Y = var2
        self.Z = outvar
        # Linear interpolation between tmin and tmax with NUM_POINTS number of
        # points, delta = tmax-min/NUM_POINTS
        XSPACE = np.linspace(CP.PropsSI(FLUID, var1 + "MIN") + 0.1,
                             CP.PropsSI(FLUID, var1 + "TMAX") - 0.1, NUM_POINTS)
        # Linear interpolation between pmin and pmax with NUM_POINTS number of
        # points, delta = max-min/NUM_POINTS
        YSPACE = np.linspace(CP.PropsSI(FLUID, var2 + "MIN") + 0.1,
                             CP.PropsSI(FLUID, var2 + "MAX") - 0.1, NUM_POINTS)

        # Create a empty list for storing data
        # Then make our data.
        data = []

        for x in XSPACE:
            for y in YSPACE:
                data.append([x, y,
                             CP.PropsSI(outvar, var1, x, var2, y, self.FLUID)])

        # rawdata is the numpy array for our data, faster!
        # Then create an empty list for storing our data
        rawdata = np.asarray(data)
        newdata = []

        # we iterate over our array, getting our Z data and its index
        for i, s in enumerate(rawdata[:, 2]):
            # make sure Z>0, X, Y are allowed values
            if outvar = "S" and s > 0 and rawdata[i, 1] >= 10**-2 and rawdata[i, 0] > 0:
                newdata.append([rawdata[i, 0], rawdata[i, 1], rawdata[i, 2]])

                # frame is a pandas data frame (nice access to our data, named columns,
                # etc.) with our good data
        self.data = pd.DataFrame(newdata, columns=[var1, var2, outvar])
        # print(frame.head(5)) # get the first 5 datapoints
        # save our data to the data folder
        data.to_csv("data/" + var1 + var2 + outvar + ".csv")

    def show_plot(self):
        # Plotting:
        fig = plt.figure()
        ax = fig.add_subplot(111, projection="3d")  # we want 3D plots
        ax.scatter(frame["T"], frame["P"], frame["S"], c=frame[
                   "S"], cmap=COLORMAP, edgecolors="none")  # Plot the data
        # Set the Labels
        ax.set_xlabel(self.X)
        ax.set_ylabel(self.Y)
        ax.set_zlabel(self.Z)
        ax.set_title("{0} and {1} vs {2}".format(self.X, self.Y, self.Z))
        plt.show()
